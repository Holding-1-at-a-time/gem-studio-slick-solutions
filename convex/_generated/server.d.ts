// This file is auto-generated by `npm run dev`. It's not intended for manual editing.
//
// If you make changes to this file, they will be overwritten when you next run `npm run dev`.
//
// For more information about Convex server-side types, see:
// https://docs.convex.dev/using/typescript#server-side-convex-functions-and-modules
//
// For more information about Convex database schemas, see:
// https://docs.convex.dev/using/schemas
//
// ######## DO NOT EDIT THIS FILE ########
//
// It's Provides a type-safe wrapper around Convex APIs.
//
// This file is regenerated every time you run `npm run dev`.
//
// You can force a regeneration by touching this file (e.g. `touch convex/_generated/server.d.ts`)
//
// To prevent this file from being checked into git, add it to your .gitignore file.

/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols

import type { AppDefinition } from "../server";
import type { DatabaseReader, DatabaseWriter } from "convex/server";
import type { Doc, Id } from "./dataModel";
import type { TableNames } from "./dataModel";

type IsNever<T> = [T] extends [never] ? true : false;

/**
 * The names of all of your Convex modules.
 */
export type CustomModuleNames =
  | "analytics"
  | "assessments"
  | "auth.config"
  | "availability"
  | "billing"
  | "googleCalendar"
  | "http"
  | "reminders"
  | "reviews"
  | "schema"
  | "scheduling"
  | "tenants"
  | "users"
  | "aiAgents" // Added
  | "jobs";    // Added

/**
 * The type of a Convex function.
 *
 * @typeParam Visibility - `public`, `internal`, or `any`.
 * @typeParam Args - The arguments to the function, as a JSON object.
 * @typeParam Output - The return type of the function, as a JSON object.
 */
export type ConvexFunction<
  Visibility extends "public" | "internal" | "any" = "any",
  Args extends any = any,
  Output = any,
> = IsNever<Args> extends true
  ? {
      // If the arguments are `never` we can call the function with no arguments.
      (ctx: any): Promise<Output>;
    }
  : {
      (ctx: any, args: Args): Promise<Output>;
    } & {
      // This is a hack to allow us to display the arguments in a tooltip.
      // We can't actually call the function with these arguments, but it's
      // useful for the developer experience.
      _args: Args;
      _output: Output;
      _visibility: Visibility;
    };
/**
 * A type describing the modules and functions defined in `convex/`.
 *
 * This type is used to provide type-safe access to Convex functions.
 */
export type Api = AppDefinition["modules"];
/**
 * A type describing the functions defined in `convex/`.
 *
 * This type is used to provide type-safe access to Convex functions.
 *
 * @deprecated This type is deprecated in favor of `Api`.
 */
export type AppApi = Api;

/**
 * All of the Functions (queries, mutations, and actions) defined in your app.
 *
 * This type is used to provide type-safe access to Convex functions.
 */
export type FunctionReference<
  FuncType extends "query" | "mutation" | "action",
  Visibility extends "public" | "internal" | "any" = "any",
  Args extends {} = any,
  Output = any,
> = {
  _type: "functionReference";
  _functionType: FuncType;
  _visibility: Visibility;
  _args: Args;
  _output: Output;
  // This is a hack to brand this type and prevent it from being confused with
  // a string.
  __functionReference: "can't create me";
};
/**
 * All of the Convex functions in your app.
 */
export type ConvexFunctions = AppDefinition["functions"];
/**
 * All of the HTTP endpoints in your app.
 */
export type ConvexHttpEndpoints = AppDefinition["httpRoutes"];
/**
 * All of the cron jobs in your app.
 */
export type ConvexCronJobs = AppDefinition["cronJobs"];

/**
 * A type that converts a module of Convex functions into a type that can be called
 * by a developer.
 *
 * This type is used to provide type-safe access to Convex functions.
 */
export type PickApi<
  T extends Record<string, ConvexFunction>,
  Visibility extends "public" | "internal" = "public",
> = {
  [key in keyof T as T[key] extends ConvexFunction<Visibility | "any", any, any>
    ? key
    : never]: T[key];
};

/**
 * The subset of your API that is publicly accessible.
 *
 * This type is used to provide type-safe access to Convex functions.
 */
export type PublicApi = AppDefinition["publicFunctions"];
/**
 * The subset of your API that is only accessible internally.
 *
 * This type is used to provide type-safe access to Convex functions.
 */
export type InternalApi = AppDefinition["internalFunctions"];

export type Query<Args extends {} = any, Output = any> = ConvexFunction<
  "public",
  Args,
  Output
>;
export type Mutation<Args extends {} = any, Output = any> = ConvexFunction<
  "public",
  Args,
  Output
>;
export type Action<Args extends {} = any, Output = any> = ConvexFunction<
  "public",
  Args,
  Output
>;

export type InternalQuery<Args extends {} = any, Output = any> = ConvexFunction<
  "internal",
  Args,
  Output
>;
export type InternalMutation<Args extends {} = any, Output = any> =
  ConvexFunction<"internal", Args, Output>;
export type InternalAction<Args extends {} = any, Output = any> =
  ConvexFunction<"internal", Args, Output>;

/**
 * An object that can be used to read from the database.
 *
 * This is passed into the first argument of all queries and mutations.
 */
export type QueryCtx = {
  db: DatabaseReader;
  auth: any; // Simplified for now
  storage: any; // Simplified for now
};

/**
 * An object that can be used to read and write to the database.
 *
 * This is passed into the first argument of all mutations.
 */
export type MutationCtx = {
  db: DatabaseWriter;
  auth: any; // Simplified for now
  storage: any; // Simplified for now
  scheduler: any; // Simplified for now
};

/**
 * An object that can be used to read and write to the database, and execute
 * other functions.
 *
 * This is passed into the first argument of all actions.
 */
export type ActionCtx = {
  runQuery: <T extends keyof PublicApi["queries"]>(
    query: T,
    ...args: Parameters<PublicApi["queries"][T]> extends [any, ...infer Rest]
      ? Rest
      : []
  ) => Promise<Awaited<ReturnType<PublicApi["queries"][T]>>>;
  runMutation: <T extends keyof PublicApi["mutations"]>(
    mutation: T,
    ...args: Parameters<PublicApi["mutations"][T]> extends [any, ...infer Rest]
      ? Rest
      : []
  ) => Promise<Awaited<ReturnType<PublicApi["mutations"][T]>>>;
  runAction: <T extends keyof PublicApi["actions"]>(
    action: T,
    ...args: Parameters<PublicApi["actions"][T]> extends [any, ...infer Rest]
      ? Rest
      : []
  ) => Promise<Awaited<ReturnType<PublicApi["actions"][T]>>>;
  scheduler: any; // Simplified for now
  storage: any; // Simplified for now
};

/**
 * @deprecated Use `QueryCtx` instead.
 */
export type QueryСtx = QueryCtx;

/**
 * @deprecated Use `MutationCtx` instead.
 */
export type MutationСtx = MutationCtx;

/**
 * @deprecated Use `ActionCtx` instead.
 */
export type ActionСtx = ActionCtx;
